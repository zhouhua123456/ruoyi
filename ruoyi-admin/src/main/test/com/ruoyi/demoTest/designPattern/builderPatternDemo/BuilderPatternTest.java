package com.ruoyi.demoTest.designPattern.builderPatternDemo;

/**
 *建造者模式
 * 意图：将一个复杂的构建与其表示相分离，使得同样的构建过程可以创建不同的表示。
 *
 * 主要解决：主要解决在软件系统中，有时候面临着"一个复杂对象"的创建工作，其通常由各个部分的子对象用一定的算法构成；由于需求的变化，这个复杂对象的各个部分经常面临着剧烈的变化，但是将它们组合在一起的算法却相对稳定。
 *
 * 何时使用：一些基本部件不会变，而其组合经常变化的时候。
 *
 * 如何解决：将变与不变分离开。
 *
 * 关键代码：建造者：创建和提供实例，导演：管理建造出来的实例的依赖关系。
 *
 * 应用实例： 1、去肯德基，汉堡、可乐、薯条、炸鸡翅等是不变的，而其组合是经常变化的，生成出所谓的"套餐"。 2、JAVA 中的 StringBuilder。
 *
 * 优点： 1、建造者独立，易扩展。 2、便于控制细节风险。
 *
 * 缺点： 1、产品必须有共同点，范围有限制。 2、如内部变化复杂，会有很多的建造类。
 *
 * 使用场景： 1、需要生成的对象具有复杂的内部结构。 2、需要生成的对象内部属性本身相互依赖。
 *
 * 注意事项：与工厂模式的区别是：建造者模式更加关注与零件装配的顺序。
 */

/**
 * 1.一般而言,多使用普通类来实现接口,但是普通类实现接口的话就必须实现接口的所有方法,这样容易造成代码冗余。
 * 2.而如果使用抽象类来实现接口,然后再用普通类继承抽象类的话,其仍然可以实现接口中但抽象类中并未实现的方法。以此可以只实现必要的方法,即抽象类中可以不定义对于子类而言必要的方法,而最终交由子类自己来实现。
 * 3.从2中可知,抽象类实现接口时,不必实现接口中的所有方法,未实现的方法可以交由子类来实现。
 */
public class BuilderPatternTest {
    public static void main(String[] args) {
        Meal meal = new MealBuilder().prepareNonVegMeal();//我们要吃一餐素食的
        meal.showItems();
        System.out.println("---------------");
        Meal meal1 = new MealBuilder().prepareVegMeal();//我们要吃一餐肉的
        meal1.showItems();

        System.out.println("---------------");
        Meal meal2 = new MealBuilder().taocan1();
        meal2.showItems();
    }
}
